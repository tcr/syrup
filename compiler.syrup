# WORK IN PROGRESS COMPILER PORT TO SYRUP
# Featuring such features like destructuring assignment
# and actual method calls

chunker = {
	"leftbracket": 	/^\[/
	"rightbracket": /^\]/
	"leftparen": 	/^\(/
	"rightparen": 	/^\)[;:]?/
	"leftbrace": 	/^\{/
	"rightbrace": 	/^\}/
	"quote": 		/^`/
	"indent": 		/^\n[\t ]*/
	"string": 		/^("([^\\"]|\\\\|\\")*"|'([^\\']|\\\\|\\')*')[:]?/
	"regex": 		/^\/([^\\\/]|\\\\|\\\/)*\//
	"callargs": 	/^[a-zA-Z_?!+\-\/*=\.]+[:]/
	"call": 		/^[a-zA-Z_?!+\-\/*=\.]+[;]/
	"atom": 		/^[a-zA-Z_?!+\-\/*=\.]+/
	"comma": 		/^,/
	"semicolon":	/^;/
	"null": 		/^null/
	"bool": 		/^true|^false/
	"number": 		/^[0-9+]+/
	"comment": 		/^\#[^\n]+/
	}

cleanReturns = fn: [str]
	str.replace: /^[\t ]+/, ''

tokenInner = fn: [c2, tokens]
	loop: [mylist = pairs: chunker]
		item = first: mylist
		k = first: item
		patt = first: rest: item

		if:
			m = patt.exec: c2
			do: fn: []
				token = first: m
				c3 = c2.substr: token.length
				c4 = c3.replace: /^[\t ]+/, ''
				tokens.push: [k, token]
				c4
			if:
				first: rest: mylist
				continue: rest: mylist
				throw: new: Error 'Invalid Code'

tokenize = fn: [code]
	c1 = code.replace: /^[\t ]+/, ''
	tokens = []
	loop: [c2 = c1]
		if:
			c2.length
			continue: tokenInner: c2, tokens
			tokens

parse = fn: [code]
	tokens = tokenize: code
	i = 0

	# Return parse tree.
	res = []
	# Stack of current node, and indentation level
	stack = [[res, -1]]
	indent = 0

	at = fn: [type]
		if: tokens[i]
			tokens[i][0] == type
			false
	peek = fn: [type]
		if: tokens[i + 1]
			tokens[i + 1][0] == type
			false
	next = fn: []
		i = i + 1
		tokens[i - 1]
	top = fn: []
		if: stack[stack.length - 1]
			stack[stack.length - 1][0]
			false
